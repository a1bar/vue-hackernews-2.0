const fs = require('fs')
const path = require('path')
const express = require('express')
const favicon = require('serve-favicon')
const compression = require('compression')
const serialize = require('serialize-javascript')
const crypto = require('crypto');
const resolve = file => path.resolve(__dirname, file)

const isProd = process.env.NODE_ENV === 'production'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()

const createPhantomPool = require('phantom-pool').default;
// Returns a generic-pool instance
const pool = createPhantomPool({
    max: 2, // more than 2 we get close to the 512 mb limit for heroku
    min: 0, 
    // specifies how long a resource can stay idle in pool before being removed
    idleTimeoutMillis: 10000,
    evictionRunIntervalMillis: 5000,
    // For all opts, see opts at https://github.com/coopernurse/node-pool#createpool
})

let indexHTML // generated by html-webpack-plugin
let renderer  // created from the webpack-generated server bundle
if (isProd) {
  console.log('PROUCTION')
  // in production: create server renderer and index HTML from real fs
  renderer = createRenderer(fs.readFileSync(resolve('./dist/server-bundle.js'), 'utf-8'))
  indexHTML = parseIndex(fs.readFileSync(resolve('./dist/index.html'), 'utf-8'))
  require('./fetchImages').run();
} else {
  console.log('DEV')
  // in development: setup the dev server with watch and hot-reload,
  // and update renderer / index HTML on file change.
  require('./build/setup-dev-server')(app, {
    bundleUpdated: bundle => {
      renderer = createRenderer(bundle)
    },
    indexUpdated: index => {
      indexHTML = parseIndex(index)
    }
  })
}

function createRenderer (bundle) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return require('vue-server-renderer').createBundleRenderer(bundle, {
    cache: require('lru-cache')({
      max: 1000,
      maxAge: 1000 * 60 * 15
    })
  })
}

function parseIndex (template) {
  const contentMarker = '<!-- APP -->'
  const i = template.indexOf(contentMarker)
  return {
    head: template.slice(0, i),
    tail: template.slice(i + contentMarker.length)
  }
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0
})

app.use(compression({ threshold: 0 }))
app.use(favicon('./public/logo-48.png'))
app.use('/service-worker.js', serve('./dist/service-worker.js'))
app.use('/manifest.json', serve('./manifest.json'))
app.use('/dist', serve('./dist'))
app.use('/public', serve('./public'))

app.use('/thumbnail/', (req, res) => {
    const imgUrl = req.query.url;
    if (!imgUrl) {
        res.sendStatus(404);
        return;
    }
const fileName = resolve(`./public/thumbnails/${crypto.createHash("md5").update(req.url).digest("hex")}.jpg`);
    // Automatically acquires a phantom instance and releases it back to the
    // pool when the function resolves or throws
    if (fs.existsSync(fileName)) {
        if (req.method === 'HEAD') {
          res.sendStatus(200);
          return;
        }
        res.sendFile(fileName);
        return;
    }

    pool.use(async(instance) => {
        const page = await instance.createPage()
        page.property('viewportSize', {
            width: req.query.width || 512,
            height: req.query.height || 512
        });
        page.property('zoomFactor', req.query.zoom || 0.5);
        page.property('clipRect', {
            top: 0,
            left: 0,
            width: req.query.width || 512,
            height: req.query.height || 512
        });
        const status = await page.open(imgUrl, {
            operation: 'GET'
        })
        if (status !== 'success') {
            throw new Error(`cannot open ${imgUrl}`)
        }
        page.render(fileName, {
            format: 'jpeg',
            quality: '85'
        });
        const content = await page.property('content');
        page.close();
        return content
    }).then((content) => {
        if (req.method === 'HEAD') {
          res.sendStatus(200);
          return Promise.resolve();
        }
        if (fs.existsSync(fileName)) {
            res.sendFile(fileName);
            return Promise.resolve();
        } else {
            response.end('OK');
            return Promise.resolve();
        }
    }).catch((error) => {
        console.log('ERROR:',error);
    });

    // Destroying the pool:
    // pool.drain().then(() => pool.clear())
});
app.get('*', (req, res) => {
  if (!renderer) {
    return res.end('waiting for compilation... refresh in a moment.')
  }

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  var s = Date.now()
  const context = { url: req.url }
  const renderStream = renderer.renderToStream(context)

  renderStream.once('data', () => {
    res.write(indexHTML.head)
  })

  renderStream.on('data', chunk => {
    res.write(chunk)
  })

  renderStream.on('end', () => {
    // embed initial store state
    if (context.initialState) {
      res.write(
        `<script>window.__INITIAL_STATE__=${
          serialize(context.initialState, { isJSON: true })
        }</script>`
      )
    }
    res.end(indexHTML.tail)
    console.log(`whole request: ${Date.now() - s}ms`)
  })

  renderStream.on('error', err => {
    if (err && err.code === '404') {
      res.status(404).end('404 | Page Not Found')
      return
    }
    // Render Error Page or Redirect
    res.status(500).end('Internal Error 500')
    console.error(`error during render : ${req.url}`)
    console.error(err)
  })
})

const port = process.env.PORT || 8080
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
